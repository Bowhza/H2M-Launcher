<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:H2MLauncher.UI;assembly=H2MLauncher.UI" 
                    xmlns:converters="clr-namespace:H2MLauncher.UI.Converters;assembly=H2MLauncher.UI" 
                    xmlns:dialog="clr-namespace:H2MLauncher.UI.Dialog;assembly=H2MLauncher.UI" 
                    xmlns:vm="clr-namespace:H2MLauncher.UI.ViewModels;assembly=H2MLauncher.UI" 
                    xmlns:dialogviews="clr-namespace:H2MLauncher.UI.Dialog.Views;assembly=H2MLauncher.UI" 
                    xmlns:controls="clr-namespace:H2MLauncher.UI.View.Controls;assembly=H2MLauncher.UI" 
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:gif="clr-namespace:XamlAnimatedGif;assembly=XamlAnimatedGif"
                    x:Name="GlobalResources">

    <system:String x:Key="CurrentThemeDirectory">pack://application:,,,/H2MLauncher.UI;component/</system:String>
    
    <!-- Converters -->
    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
    <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
    <converters:InvertableBooleanToVisibilityConverter x:Key="invertableBooleanToVisibilityConverter"/>
    <converters:EmptyItemConverter x:Key="emptyItemConverter" />
    <converters:HostNameColorConverter x:Key="HostNameColorConverter" />
    <converters:NegatingConverter x:Key="NegatingConverter" />
    <converters:BooleanToEditConverter x:Key="BoolToEditConverter" />
    <converters:DefaultStringValueConverter x:Key="DefaultStringValueConverter" />
    <converters:StringUriConverter x:Key="StringUriConverter"/>
    <converters:UrlCombinerConverter x:Key="UrlCombinerConverter" />
    <converters:HumanizeDateConverter x:Key="HumanizeDateConverter" />

    <!-- Contrast Colors -->
    <Color x:Key="ColorLight">White</Color>
    <Color x:Key="ColorBlack">Black</Color>

    <!-- Neutral Color Palette -->
    <Color x:Key="ColorNeutral50">GhostWhite</Color>
    <Color x:Key="ColorNeutral100">#e7e7e7</Color>
    <Color x:Key="ColorNeutral250">LightGray</Color>
    <Color x:Key="ColorNeutral200">#CCC</Color>
    <Color x:Key="ColorNeutral300">DarkGray</Color>
    <Color x:Key="ColorNeutral400">#888888</Color>
    <Color x:Key="ColorNeutral500">#6d6d6d</Color>
    <Color x:Key="ColorNeutral600">#444</Color>
    <Color x:Key="ColorNeutral700">#373737</Color>
    <Color x:Key="ColorNeutral800">#262626</Color>
    <Color x:Key="ColorNeutral900">#171717</Color>
    <Color x:Key="ColorNeutral950">#0a0a0a</Color>

    <!-- Primary Color Palette -->
    <Color x:Key="ColorPrimary100">#ffd1a5</Color>
    <Color x:Key="ColorPrimary200">#fdba74</Color>
    <Color x:Key="ColorPrimary300">Orange</Color>
    <Color x:Key="ColorPrimary400">#E59400</Color>
    <Color x:Key="ColorPrimary500">DarkOrange</Color>
    <Color x:Key="ColorPrimary600">OrangeRed</Color>
    <Color x:Key="ColorPrimary700">#cc2f02</Color>
    <Color x:Key="ColorPrimary800">#a1250b</Color>
    <Color x:Key="ColorPrimary900">DarkRed</Color>
    <Color x:Key="ColorPrimary950">#460d04</Color>

    <!-- Secondary Color Palette -->
    <Color x:Key="ColorSecondary100">#c9ffc4</Color>
    <Color x:Key="ColorSecondary200">#98ff90</Color>
    <Color x:Key="ColorSecondary300">#56ff50</Color>
    <Color x:Key="ColorSecondary400">#00ff00</Color>
    <Color x:Key="ColorSecondary500">#7cfc00</Color>
    <Color x:Key="ColorSecondary600">#32CD32</Color>
    <Color x:Key="ColorSecondary700">#008b07</Color>
    <Color x:Key="ColorSecondary800">#076d0d</Color>
    <Color x:Key="ColorSecondary900">#0b5c11</Color>
    <Color x:Key="ColorSecondary950">#003406</Color>


    <!--  Brushes -->
    <SolidColorBrush x:Key="TextDark" Color="{DynamicResource ColorBlack}" />
    <SolidColorBrush x:Key="TextLight" Color="{DynamicResource ColorLight}" />
    <SolidColorBrush x:Key="TextHint" Color="{DynamicResource ColorNeutral300}" />

    <SolidColorBrush x:Key="ControlBackground" Color="{DynamicResource ColorNeutral700}" />
    <SolidColorBrush x:Key="ControlBackgroundDisabled" Color="{DynamicResource ColorNeutral600}" />
    <SolidColorBrush x:Key="ControlForegroundDisabled" Color="{DynamicResource ColorNeutral200}" />
    <SolidColorBrush x:Key="ControlBorderBrush" Color="{DynamicResource ColorNeutral300}" />
    <SolidColorBrush x:Key="ControlBorderBrushNeutral" Color="{DynamicResource ColorNeutral600}" />

    <SolidColorBrush x:Key="DialogForeground" Color="{DynamicResource ColorLight}"/>
    <SolidColorBrush x:Key="DialogForegroundDisabled" Color="{DynamicResource ColorNeutral600}"/>
    <SolidColorBrush x:Key="DialogBackground" Color="{DynamicResource ColorBlack}" />
    <SolidColorBrush x:Key="DialogBorderBrush" Color="{DynamicResource ColorNeutral50}" />

    <!-- Primary Brushes -->
    <SolidColorBrush x:Key="BrushPrimary100" Color="{DynamicResource ColorPrimary100}" />
    <SolidColorBrush x:Key="BrushPrimary200" Color="{DynamicResource ColorPrimary200}" />
    <SolidColorBrush x:Key="BrushPrimary300" Color="{DynamicResource ColorPrimary300}" />
    <SolidColorBrush x:Key="BrushPrimary400" Color="{DynamicResource ColorPrimary400}" />
    <SolidColorBrush x:Key="BrushPrimary500" Color="{DynamicResource ColorPrimary500}" />
    <SolidColorBrush x:Key="BrushPrimary600" Color="{DynamicResource ColorPrimary600}" />
    <SolidColorBrush x:Key="BrushPrimary700" Color="{DynamicResource ColorPrimary700}" />
    <SolidColorBrush x:Key="BrushPrimary800" Color="{DynamicResource ColorPrimary800}" />
    <SolidColorBrush x:Key="BrushPrimary900" Color="{DynamicResource ColorPrimary900}" />
    <SolidColorBrush x:Key="BrushPrimary950" Color="{DynamicResource ColorPrimary950}" />

    <SolidColorBrush x:Key="ControlPrimary" Color="{DynamicResource ColorPrimary500}" />
    <SolidColorBrush x:Key="ControlPrimaryHover" Color="{DynamicResource ColorPrimary400}" />
    <SolidColorBrush x:Key="ControlPrimarySelected" Color="{DynamicResource ColorPrimary500}" />
    <SolidColorBrush x:Key="ControlPrimaryPressed" Color="{DynamicResource ColorPrimary600}" />
    <SolidColorBrush x:Key="ControlPrimaryForeground" Color="{DynamicResource ColorBlack}" />

    <!-- Secondary Brushes -->
    <SolidColorBrush x:Key="BrushSecondary" Color="{DynamicResource ColorSecondary500}"/>
    <SolidColorBrush x:Key="BrushSecondary100" Color="{DynamicResource ColorSecondary100}"/>
    <SolidColorBrush x:Key="BrushSecondary200" Color="{DynamicResource ColorSecondary200}"/>
    <SolidColorBrush x:Key="BrushSecondary300" Color="{DynamicResource ColorSecondary300}"/>
    <SolidColorBrush x:Key="BrushSecondary400" Color="{DynamicResource ColorSecondary400}"/>
    <SolidColorBrush x:Key="BrushSecondary500" Color="{DynamicResource ColorSecondary500}"/>
    <SolidColorBrush x:Key="BrushSecondary600" Color="{DynamicResource ColorSecondary600}"/>
    <SolidColorBrush x:Key="BrushSecondary700" Color="{DynamicResource ColorSecondary700}"/>
    <SolidColorBrush x:Key="BrushSecondary800" Color="{DynamicResource ColorSecondary800}"/>
    <SolidColorBrush x:Key="BrushSecondary900" Color="{DynamicResource ColorSecondary900}"/>
    <SolidColorBrush x:Key="BrushSecondary950" Color="{DynamicResource ColorSecondary950}"/>


    <!-- Neutral Brushes -->
    <SolidColorBrush x:Key="BrushNeutral" Color="{DynamicResource ColorNeutral400}"/>
    <SolidColorBrush x:Key="BrushNeutralLight" Color="{DynamicResource ColorNeutral250}"/>
    <SolidColorBrush x:Key="BrushNeutralDark" Color="{DynamicResource ColorNeutral700}"/>
    <SolidColorBrush x:Key="BrushNeutral100" Color="{DynamicResource ColorNeutral100}"/>
    <SolidColorBrush x:Key="BrushNeutral200" Color="{DynamicResource ColorNeutral200}"/>
    <SolidColorBrush x:Key="BrushNeutral250" Color="{DynamicResource ColorNeutral250}"/>
    <SolidColorBrush x:Key="BrushNeutral300" Color="{DynamicResource ColorNeutral300}"/>
    <SolidColorBrush x:Key="BrushNeutral400" Color="{DynamicResource ColorNeutral400}"/>
    <SolidColorBrush x:Key="BrushNeutral500" Color="{DynamicResource ColorNeutral500}"/>
    <SolidColorBrush x:Key="BrushNeutral600" Color="{DynamicResource ColorNeutral600}"/>
    <SolidColorBrush x:Key="BrushNeutral700" Color="{DynamicResource ColorNeutral700}"/>
    <SolidColorBrush x:Key="BrushNeutral800" Color="{DynamicResource ColorNeutral800}"/>
    <SolidColorBrush x:Key="BrushNeutral900" Color="{DynamicResource ColorNeutral900}"/>
    <SolidColorBrush x:Key="BrushNeutral950" Color="{DynamicResource ColorNeutral950}"/>

    <!-- Transparent Dark Brushes -->
    <SolidColorBrush x:Key="TransparentDark100" Color="{DynamicResource ColorBlack}" Opacity="0.1"/>
    <SolidColorBrush x:Key="TransparentDark200" Color="{DynamicResource ColorBlack}" Opacity="0.2"/>
    <SolidColorBrush x:Key="TransparentDark300" Color="{DynamicResource ColorBlack}" Opacity="0.3"/>
    <SolidColorBrush x:Key="TransparentDark400" Color="{DynamicResource ColorBlack}" Opacity="0.4"/>
    <SolidColorBrush x:Key="TransparentDark500" Color="{DynamicResource ColorBlack}" Opacity="0.5"/>
    <SolidColorBrush x:Key="TransparentDark600" Color="{DynamicResource ColorBlack}" Opacity="0.6"/>
    <SolidColorBrush x:Key="TransparentDark700" Color="{DynamicResource ColorBlack}" Opacity="0.7"/>
    <SolidColorBrush x:Key="TransparentDark800" Color="{DynamicResource ColorBlack}" Opacity="0.8"/>
    <SolidColorBrush x:Key="TransparentDark900" Color="{DynamicResource ColorBlack}" Opacity="0.9"/>

    <!-- Transparent White Brushes -->
    <SolidColorBrush x:Key="TransparentLight100" Color="{DynamicResource ColorLight}" Opacity="0.1"/>
    <SolidColorBrush x:Key="TransparentLight200" Color="{DynamicResource ColorLight}" Opacity="0.2"/>
    <SolidColorBrush x:Key="TransparentLight300" Color="{DynamicResource ColorLight}" Opacity="0.3"/>
    <SolidColorBrush x:Key="TransparentLight400" Color="{DynamicResource ColorLight}" Opacity="0.4"/>
    <SolidColorBrush x:Key="TransparentLight500" Color="{DynamicResource ColorLight}" Opacity="0.5"/>
    <SolidColorBrush x:Key="TransparentLight600" Color="{DynamicResource ColorLight}" Opacity="0.6"/>
    <SolidColorBrush x:Key="TransparentLight700" Color="{DynamicResource ColorLight}" Opacity="0.7"/>
    <SolidColorBrush x:Key="TransparentLight800" Color="{DynamicResource ColorLight}" Opacity="0.8"/>
    <SolidColorBrush x:Key="TransparentLight900" Color="{DynamicResource ColorLight}" Opacity="0.9"/>

    <!-- TextBox Brushes -->
    <SolidColorBrush x:Key="TextBoxBackgroundDark" Color="{DynamicResource ColorBlack}" Opacity="0.2"/>
    <SolidColorBrush x:Key="TextBoxForegroundDark" Color="{DynamicResource ColorLight}"/>
    <SolidColorBrush x:Key="TextBoxBorderBrush" Color="{DynamicResource ColorNeutral400}"/>

    <!-- Transparent Item Brushes -->
    <SolidColorBrush x:Key="ItemTransparentHover" Color="{DynamicResource ColorLight}" Opacity="0.07"/>
    <SolidColorBrush x:Key="ItemTransparentPressed" Color="{DynamicResource ColorLight}" Opacity="0.13"/>
    <SolidColorBrush x:Key="ItemTransparentChecked" Color="{DynamicResource ColorLight}" Opacity="0.3"/>

    <!-- Color of the online status (Online, In Match, Offline) -->
    <SolidColorBrush x:Key="OnlineStatusColor" Color="{DynamicResource ColorNeutral300}"/>

    <!-- Color used for errors, delete actions, etc. -->
    <SolidColorBrush x:Key="DangerColorBrush" Color="DarkRed"/>
    
    <!-- Color used for success states etc. -->
    <SolidColorBrush x:Key="SuccessColorBrush" Color="LimeGreen"/>


    <!-- Main Window -->
    
    <Style x:Key="BackgroundImageContainerStyle" TargetType="Border">
        <!-- Hide this container to hide the background image + video and expose the background brush -->
        <Setter Property="Visibility" Value="Visible"/>
    </Style>

    <!-- Style for the actual background image -->
    <Style x:Key="BackgroundImageStyle" TargetType="Image">
        <!-- Hide this to hide the background image and expose the background brush -->
        <Setter Property="Visibility" Value="Visible"/>
    </Style>

    <!-- Brush for the background of the main window behind the image -->
    <SolidColorBrush x:Key="MainWindowBackgroundBrush" Color="{DynamicResource ColorBlack}"/>

    <!-- Brush for the border of the main window -->
    <SolidColorBrush x:Key="MainWindowBorderBrush" Color="Transparent"/>

    <!-- Background image source of the main window -->
    <ImageSource x:Key="{x:Static local:Constants.BackgroundImageSourceKey}">/Assets/Background.jpg</ImageSource>
    <system:Double x:Key="{x:Static local:Constants.BackgroundImageBlurRadiusKey}">0</system:Double>
    
    <!-- Background video source -->
    <x:Null x:Key="{x:Static local:Constants.BackgroundVideoSourceKey}"></x:Null>

    <!-- Background controls (put any elements or media here) -->
    <DataTemplate x:Key="BackgroundControlTemplate" DataType="{x:Type vm:ServerBrowserViewModel}">
        
    </DataTemplate>


    <!-- Default style for all controls -->
    <Style x:Key="DefaultStyle" TargetType="{x:Type Control}">
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextLight}"/>
    </Style>
    <Style TargetType="CheckBox" BasedOn="{StaticResource DefaultStyle}"/>


    <!-- Title -->
    <Style x:Key="TitleStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextLight}"/>
    </Style>

    <!-- Sub Title (player count etc.) -->
    <Style x:Key="SubTitleStyle" TargetType="FrameworkElement">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource TextLight}"/>
    </Style>

    <Style x:Key="CountNumberStyle" TargetType="{x:Type FrameworkElement}" BasedOn="{StaticResource SubTitleStyle}"/>

    <!-- Status Bar -->
    <Style x:Key="MainStatusBarStyle" TargetType="StatusBar">
        <Setter Property="Foreground" Value="{DynamicResource BrushNeutral200}" />
        <Setter Property="Background" Value="{DynamicResource TransparentDark600}"/>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ControlBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" x:Name="border"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Foreground" Value="LightBlue" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlBackgroundDisabled}" />
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ControlBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="0,4,4,0" x:Name="border"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                            BorderBrush="{DynamicResource ControlBorderBrush}" 
                            BorderThickness="1,0,0,0">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Foreground" Value="LightBlue" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlBackgroundDisabled}" />
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" x:Name="border"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource TransparentLight400}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlBackgroundDisabled}" />
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DiscordWindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" x:Name="border"
                     Background="{TemplateBinding Background}"
                     Padding="{TemplateBinding Padding}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}"
                                       HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#5865F2" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlBackgroundDisabled}" />
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AcceptButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" x:Name="border"
                 Background="{TemplateBinding Background}"
                 Padding="{TemplateBinding Padding}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}"
                                   HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#34b233" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlBackgroundDisabled}" />
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RejectButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" x:Name="border"
             Background="{TemplateBinding Background}"
             Padding="{TemplateBinding Padding}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}"
                               HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Red" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlBackgroundDisabled}" />
                            <Setter TargetName="border" Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LinkButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="MyContentPresenter" 
                                          Content="{TemplateBinding Content}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          Margin="0,0,0,0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <!--<Setter Property="Background" Value="#22333333" />-->
                            <!--<Setter Property="BorderBrush" Value="#333"/>-->
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ControlPrimaryHover}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparentButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}">
        <Setter Property="Background" Value="{DynamicResource TransparentDark200}" />
        <Setter Property="BorderThickness" Value="0.5" />
        <Setter Property="BorderBrush" Value="{DynamicResource TransparentDark300}" />
    </Style>

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ControlBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlPrimaryHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Foreground" Value="LightBlue" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource BrushPrimary900}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LinkToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter x:Name="MyContentPresenter" 
                                      Content="{TemplateBinding Content}" 
                                      HorizontalAlignment="Center" 
                                      VerticalAlignment="Center" 
                                      Margin="0,0,0,0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <!--<Setter Property="Background" Value="#22333333" />-->
                            <!--<Setter Property="BorderBrush" Value="#333"/>-->
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ControlPrimaryHover}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="Border"
                Grid.ColumnSpan="2"
                CornerRadius="0"
                Background="{DynamicResource ControlBackground}"
                BorderBrush="{DynamicResource ControlBorderBrush}"
                BorderThickness="0" />
            <Path
                x:Name="Arrow"
                Grid.Column="1"
                Fill="{DynamicResource TextLight}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlPrimaryHover}" />
                <Setter Property="Background" Value="{DynamicResource ControlPrimaryHover}" />
                <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlPrimaryHover}" />
                <Setter Property="Foreground" Value="{DynamicResource BrushPrimary900}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource BrushNeutral}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource BrushNeutral}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ControlPrimaryPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource TextLight}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <SolidColorBrush x:Key="ComboBoxBackgroundColor" Color="{DynamicResource ColorNeutral700}" />
    <SolidColorBrush x:Key="ComboBoxForegroundColor" Color="{DynamicResource ColorLight}" />
    <SolidColorBrush x:Key="ComboBoxPopupBorderColor" Color="{DynamicResource ColorNeutral300}" />

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{DynamicResource ComboBoxBackgroundColor}" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundColor}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton
                            Name="ToggleButton"
                            Template="{StaticResource ComboBoxToggleButton}"
                            Grid.Column="2"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>

                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="3,3,23,3"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left" />

                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="Transparent"
                            Foreground="{TemplateBinding Foreground}"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True"
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="{DynamicResource ComboBoxBackgroundColor}"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource ComboBoxPopupBorderColor}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource BrushNeutral}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource TextLight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Border Background="{DynamicResource ControlBackground}"
                            BorderBrush="{DynamicResource ControlBorderBrush}"
                            BorderThickness="0,0,1,1">
                        <Grid Name="HeaderGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Margin="5" VerticalAlignment="Center" Grid.Column="0"/>


                            <Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill"
                                  Grid.Column="1" Width="8" Height="6" Fill="{DynamicResource TextLight}" Margin="0,0,8,0"
                                  VerticalAlignment="Center" RenderTransformOrigin="0.5,0.4" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="HeaderGrid" Value="{DynamicResource BrushPrimary300}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="HeaderGrid" Value="{DynamicResource ControlPrimarySelected}" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter Property="Background" TargetName="HeaderGrid" Value="{DynamicResource ControlPrimarySelected}" />
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter Property="Background" TargetName="HeaderGrid" Value="{DynamicResource ControlPrimarySelected}" />
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoSelectComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <!-- Make it totally non selectable -->
                    <Setter Property="Focusable" Value="False"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Border Name="Border" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ToggleButton 
                             Name="ToggleButton" 
                             Template="{StaticResource ComboBoxToggleButton}" 
                             Grid.Column="2" 
                             Focusable="false"
                             IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                             ClickMode="Press">
                        </ToggleButton>

                        <ContentPresenter 
                            Name="ContentSite" 
                            IsHitTestVisible="{Binding Path=(controls:ComboBoxSelectionBoxAltTemplateBehaviour.IsHitTestVisible), RelativeSource={RelativeSource Mode=TemplatedParent}}"  
                            Content="{Binding Path=(controls:ComboBoxSelectionBoxAltTemplateBehaviour.SelectionBoxAltContent), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Stretch"
                            HorizontalAlignment="Stretch" />


                        <TextBox x:Name="PART_EditableTextBox"
                             Style="{x:Null}" 
                             Template="{StaticResource ComboBoxTextBox}" 
                             HorizontalAlignment="Left" 
                             VerticalAlignment="Center" 
                             Margin="3,3,23,3"
                             Focusable="True" 
                             Background="{DynamicResource ComboBoxBackgroundColor}"
                             Foreground="{DynamicResource ComboBoxForegroundColor}"
                             Visibility="Hidden"
                             IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource ComboBoxBackgroundColor}" BorderBrush="{DynamicResource ComboBoxPopupBorderColor}" BorderThickness="1" Padding="0,4">
                                    <ScrollViewer SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" 
                                                  CanContentScroll="True" Style="{x:Null}"
                                                  MaxHeight="100">
                                        <!-- Use a ListBox to directly present the items without ComboBoxItem wrapping and dont bind selected item -->
                                        <ListBox ItemsSource="{TemplateBinding ItemsSource}" 
                                                 Background="Transparent"
                                                 BorderThickness="0"
                                                 ItemTemplate="{TemplateBinding ItemTemplate}"
                                                 ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                                 IsHitTestVisible="True"
                                                 Focusable="False"
                                                 HorizontalContentAlignment="Stretch" ScrollViewer.CanContentScroll="False">
                                            <ListBox.Template>
                                                <ControlTemplate>
                                                    <!-- Empty template to allow ScrollViewer to capture mouse scroll -->
                                                    <ItemsPresenter />
                                                </ControlTemplate>
                                            </ListBox.Template>
                                            <!--Setting ItemsPanel to StackPanel to keep same behavior-->
                                            <ListBox.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel />
                                                </ItemsPanelTemplate>
                                            </ListBox.ItemsPanel>
                                        </ListBox>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="controls:ComboBoxSelectionBoxAltTemplateBehaviour.SelectionBoxAltContent" Value="{x:Null}">
                            <Setter Property="Content" TargetName="ContentSite" Value="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextLight}"/>
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" Margin="0,4,-1,0" Background="{DynamicResource ControlBackground}" CornerRadius="2,6,0,0"
                                BorderBrush="{DynamicResource ControlBorderBrush}" BorderThickness="1,1,1,1">
                            <ContentPresenter 
                                    x:Name="ContentSite" VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    ContentSource="Header" Margin="10,4">
                            </ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlPrimarySelected}" />
                            <Setter Property="Foreground" Value="{DynamicResource ControlPrimaryForeground}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="Border" Property="Margin" Value="0,0,-4,0" />
                            <Setter Property="Panel.ZIndex" Value="100" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlPrimaryHover}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushNeutral}" />
                            <Setter Property="Foreground" Value="{DynamicResource BrushNeutralLight}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=HorizontalAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabPanel}}}"
                                     Value="Center">
                            <Setter TargetName="Border" Property="CornerRadius" Value="6,6,0,0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TransparentItemToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Name="Bd"
                            Padding="{TemplateBinding Padding}"
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            TextElement.Foreground="{TemplateBinding Foreground}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ItemTransparentHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ItemTransparentPressed}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ItemTransparentChecked}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsOpen, ElementName=DetailsPopup}" Value="True">
                <Setter Property="Background" Value="{DynamicResource TransparentLight200}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TransparentItem" TargetType="{x:Type ContentControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Name="Bd"
                            Padding="{TemplateBinding Padding}"
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            TextElement.Foreground="{TemplateBinding Foreground}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ItemTransparentHover}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsOpen, ElementName=DetailsPopup}" Value="True">
                <Setter Property="Background" Value="{DynamicResource TransparentDark200}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Template for group expander header displayed as {Name} — {Count} -->
    <DataTemplate x:Key="GroupExpanderHeaderTemplate">
        <Border CornerRadius="5" Height="25">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock Foreground="{DynamicResource TextLight}" Opacity="0.8" FontSize="12"
                       VerticalAlignment="Center">
                    <TextBlock.Text>
                        <MultiBinding StringFormat="{} {0} — {1}">
                            <Binding Path="Name" />
                            <Binding Path="ItemCount" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </Grid>
        </Border>
    </DataTemplate>

    <!-- Style for the expanders of the social list groups -->
    <Style x:Key="SocialExpanderBaseStyle" TargetType="{x:Type controls:CustomExpander}">
        <Setter Property="Foreground" Value="{DynamicResource TextLight}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0,5,0,3"/>
        <Setter Property="HeaderTemplate" Value="{StaticResource GroupExpanderHeaderTemplate}"/>
        <Setter Property="IsExpanded" Value="True"/>
    </Style>

    <!-- Style for the border that holds the social panel -->
    <Style x:Key="SocialPanelBorderStyle" TargetType="Border">
        <Setter Property="CornerRadius" Value="5,5,0,0"/>
        <Setter Property="Background" Value="{DynamicResource TransparentDark200}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <!-- Style for the social tab control -->
    <Style x:Key="SocialTabControlStyle" TargetType="TabControl">
        <Setter Property="Background" Value="{DynamicResource TransparentDark400}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Resources>
            <Style TargetType="{x:Type TabPanel}">
                <!-- Center tabs -->
                <Setter Property="HorizontalAlignment" Value="Center" />
            </Style>
        </Style.Resources>
    </Style>

    <!-- Style for each control of the social tabs (Friends, Requests, Recents) -->
    <Style x:Key="SocialControlStyle" TargetType="Control"/>

    <!-- Tab control of the server tabs -->
    <Style x:Key="ServerTabControlStyle" TargetType="TabControl">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}"/>
    </Style>


    <!-- A solid background color behind the header of the server data grid -->
    <SolidColorBrush x:Key="ServerDataGridHeaderBackground" Color="{DynamicResource ColorBlack}" Opacity="0.9"/>

    <Style x:Key="ServerDataGridStyle" TargetType="DataGrid">
        <Setter Property="RowBackground" Value="Transparent"/>
        <Setter Property="Background" Value="{DynamicResource TransparentDark900}"/>
        <Setter Property="Opacity" Value="0.9"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style x:Key="ServerDataGridRowStyle" TargetType="DataGridRow">
        <!-- Enable focus and tab navigation for row -->
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Opacity" Value="0.9"></Setter>

        <Style.Triggers>
            <!-- Selection box -->
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource BrushSecondary}" />
                <Setter Property="BorderThickness" Value="0 1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ServerDataGridCellStyle" TargetType="DataGridCell">
        <Setter Property="TextBlock.TextAlignment" Value="Left" />
        <Setter Property="TextBlock.VerticalAlignment" Value="Center" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource TextLight}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <!-- Custom template to center content -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Disable focus for cells -->
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <!-- Selection background -->
                <Setter Property="Background" Value="{DynamicResource BrushNeutral800}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Dark TextBox used in dialogs on dark background -->
    <Style x:Key="TransparentDarkTextBoxStyle" TargetType="{x:Type TextBox}">
        <Style.Setters>
            <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundDark}"/>
            <Setter Property="Background" Value="{DynamicResource TextBoxBackgroundDark}"/>
            <Setter Property="CaretBrush" Value="{DynamicResource TextBoxForegroundDark}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        </Style.Setters>
    </Style>

    <!-- TextBlock used inside every dialog -->
    <Style x:Key="DialogTextBlockStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource DialogForeground}" />
    </Style>

    <!-- General style for the content of each dialog (use to override resources in that scope) -->
    <Style x:Key="DialogContentStyle" TargetType="Border"/>

    <!-- Popup for details used in social controls -->
    <Style x:Key="DetailsPopupBorderStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BrushNeutral900}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DialogBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
</ResourceDictionary>