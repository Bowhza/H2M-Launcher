<Window x:Class="H2MLauncher.UI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:s="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:H2MLauncher.UI"
        xmlns:view="clr-namespace:H2MLauncher.UI.View" 
        xmlns:vm="clr-namespace:H2MLauncher.UI.ViewModels" 
        xmlns:models="clr-namespace:H2MLauncher.Core.Models;assembly=H2MLauncher.Core" 
        xmlns:dialog="clr-namespace:H2MLauncher.UI.Dialog" 
        xmlns:controls="clr-namespace:H2MLauncher.UI.View.Controls" 
        xmlns:srv="clr-namespace:H2MLauncher.Core.Services;assembly=H2MLauncher.Core" 
        xmlns:converters="clr-namespace:H2MLauncher.UI.Converters" 
        xmlns:dialogviews="clr-namespace:H2MLauncher.UI.Dialog.Views" 
        d:DataContext="{d:DesignInstance Type=vm:ServerBrowserViewModel}"
        x:Name="mainWindow"
        AllowsTransparency="True"
        WindowStyle="None"
        ResizeMode="CanResizeWithGrip"
        MinHeight="576"
        MinWidth="1030"
        Width="1030"
        Height="576"
        Background="Transparent"
        mc:Ignorable="d"
        MouseDown="Window_MouseDown"
        KeyDown="Window_KeyDown"
        StateChanged="Window_StateChanged"
        Icon="Assets/icon.ico"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        Title="Better H2M-Launcher">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding CheckUpdateStatusCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <converters:PingColorConverter x:Key="PingColorConverter"/>
        <converters:BooleanToStarConverter x:Key="BooleanToStarConverter"/>
        <converters:BooleanToPrivateStatusConverter x:Key="BooleanToPrivateStatusConverter"/>
        <converters:ProtocolToIconConverter x:Key="ProtocolToIconConverter"/>

        <converters:NonlinearCoercionConverter x:Key="CompensateBlurConverter">
            <converters:NonlinearCoercionConverter.InputMax>
                <!-- Maximum possible blur radius -->
                <s:Int32>200</s:Int32>
            </converters:NonlinearCoercionConverter.InputMax>
            <converters:NonlinearCoercionConverter.OutputMax>
                <!-- Maximum compensating margin -->
                <s:Int32>-40</s:Int32>
            </converters:NonlinearCoercionConverter.OutputMax>
        </converters:NonlinearCoercionConverter>


        <local:PlayersSorter x:Key="PlayersSorter"/>
    </Window.Resources>
    <Window.InputBindings>
        <!-- Disable Shortcut Commands -->
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding SaveServersCommand}" />
        <KeyBinding view:InputBinding.Shortcut="{Binding Shortcuts.RefreshServers}" Command="{Binding RefreshServersCommand}" />
        <KeyBinding view:InputBinding.Shortcut="{Binding Shortcuts.Reconnect}" Command="{Binding ReconnectCommand}"/>
        <KeyBinding view:InputBinding.Shortcut="{Binding Shortcuts.Disconnect}" Command="{Binding DisconnectCommand}"/>
        <KeyBinding view:InputBinding.Shortcut="{Binding Shortcuts.ToggleOverlay}" Command="{Binding ToggleOverlayCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
    </Window.InputBindings>
    <Grid>
        <!-- Workaround to bind to dynamic resources -->
        <FrameworkElement x:Name="BackgroundBlurGetter" Visibility="Collapsed" DataContext="{DynamicResource BackgroundImageBlurRadius}" />
        <FrameworkElement x:Name="BackgroundMediaUriGetter" Visibility="Collapsed" DataContext="{DynamicResource BackgroundVideoSource}" />

        <Border CornerRadius="10" 
                Background="{DynamicResource MainWindowBackgroundBrush}" 
                BorderBrush="{DynamicResource MainWindowBorderBrush}" 
                BorderThickness="1" />
        <Border CornerRadius="10" ClipToBounds="True" SizeChanged="Border_SizeChanged" Style="{DynamicResource BackgroundImageContainerStyle}">
            <Grid x:Name="ImageContainer" RenderTransformOrigin="0.5, 0.5">
                <Grid.Resources>
                    <Storyboard x:Key="FadeInStoryboard">
                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                         From="0.0" To="1.0" Duration="0:0:0.5"/>
                    </Storyboard>
                </Grid.Resources>
                <Grid.Background>
                    <VisualBrush Stretch="UniformToFill">
                        <VisualBrush.Visual>
                            <!-- Stack image and video inside a grid - make sure it always fills the parent container -->
                            <Grid Width="{Binding Path=ActualWidth, ElementName=ImageContainer}" HorizontalAlignment="Stretch"
                                  Height="{Binding Path=ActualHeight, ElementName=ImageContainer}" VerticalAlignment="Stretch">

                                <!-- Background image -->
                                <Image x:Name="BackgroundImageBrush" Style="{DynamicResource BackgroundImageStyle}" 
                                       Stretch="UniformToFill" >
                                    <Image.Source>
                                        <DynamicResource ResourceKey="{x:Static local:Constants.BackgroundImageSourceKey}"/>
                                    </Image.Source>
                                </Image>

                                <!-- Background video -->
                                <controls:LoopingMediaElement 
                                              Stretch="UniformToFill"
                                              MediaFailed="MediaElement_MediaFailed"
                                              MediaOpened="MediaElement_MediaOpened"
                                              LoadedBehavior="Play"
                                              UnloadedBehavior="Manual"
                                              IsMuted="True"
                                              Opacity="0">
                                    <controls:LoopingMediaElement.Source>
                                        <MultiBinding Converter="{StaticResource UrlCombinerConverter}">
                                            <Binding Path="Customization.CurrentThemeDirectory" ElementName="mainWindow" />
                                            <Binding Path="DataContext" ElementName="BackgroundMediaUriGetter"/>
                                        </MultiBinding>
                                    </controls:LoopingMediaElement.Source>
                                    <controls:LoopingMediaElement.Style>
                                        <Style TargetType="MediaElement">
                                            <Style.Triggers>
                                                <!-- Fade in video once loaded -->
                                                <EventTrigger RoutedEvent="MediaElement.MediaOpened">
                                                    <BeginStoryboard Storyboard="{StaticResource FadeInStoryboard}"/>
                                                </EventTrigger>

                                                <!-- Hide video if no url -->
                                                <DataTrigger Binding="{Binding DataContext, ElementName=BackgroundMediaUriGetter}" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </controls:LoopingMediaElement.Style>
                                </controls:LoopingMediaElement>
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </Grid.Background>
                <Grid.Style>
                    <Style TargetType="Grid">
                        <!--Compensate for the blur effect by non-linearly zooming in to prevent dark edges-->
                        <Setter Property="Margin" 
                                Value="{Binding DataContext, 
                                                ElementName=BackgroundBlurGetter, 
                                                Converter={StaticResource CompensateBlurConverter}}"/>
                    </Style>
                </Grid.Style>
            </Grid>

            <!-- Apply blur to the border AFTER the image fills the background -->
            <Border.Effect>
                <BlurEffect Radius="{DynamicResource BackgroundImageBlurRadius}" KernelType="Gaussian"/>
            </Border.Effect>
        </Border>
        <Border CornerRadius="10">
            <ContentPresenter ContentTemplate="{DynamicResource BackgroundControlTemplate}" Content="{Binding }"/>
        </Border>
        <Border CornerRadius="10" Padding="10,10">
            <Grid Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="0,0,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="85" />
                    </Grid.ColumnDefinitions>

                    <!-- Title -->
                    <TextBlock Grid.Column="0" Text="H2M Launcher" FontSize="30" FontWeight="Bold" Style="{DynamicResource TitleStyle}"/>

                    <!-- Socials -->
                    <StackPanel Grid.Column="2" Orientation="Horizontal" Margin="10,5,0,0">
                        <Button VerticalAlignment="Center" Style="{StaticResource DiscordWindowButtonStyle}" HorizontalAlignment="Left"
                                Height="27" Width="27" Margin="0,0,5,0"
                                Background="{DynamicResource TransparentLight100}" ToolTip="Join our Discord server" Command="{Binding Socials.JoinDiscordCommand}">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="Assets/discord-mark-white.png" Stretch="Uniform" Height="13" RenderOptions.BitmapScalingMode="HighQuality"/>
                            </StackPanel>
                        </Button>
                        <Button VerticalAlignment="Center" HorizontalAlignment="Left"
                                Height="27" Width="27" Style="{StaticResource WindowButtonStyle}"
                                Background="{DynamicResource TransparentLight100}" ToolTip="H2MLauncher on GitHub" Command="{Binding Socials.OpenGitHubCommand}">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="Assets/github-mark-white.png" Stretch="Uniform" Height="13" RenderOptions.BitmapScalingMode="HighQuality"/>
                            </StackPanel>
                        </Button>
                    </StackPanel>

                    <!-- Update -->
                    <TextBlock Grid.Column="3" Text="{Binding UpdateStatusText}" Foreground="{DynamicResource TextLight}" FontSize="20" HorizontalAlignment="Right" FontWeight="Bold" Padding="5">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UpdateLauncherCommand.IsRunning}" Value="True">
                                        <Setter Property="Visibility"  Value="Hidden"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding UpdateFinished}" Value="True">
                                        <Setter Property="Visibility"  Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDown">
                                <i:InvokeCommandAction Command="{Binding UpdateLauncherCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBlock>
                    <Grid Grid.Column="3" HorizontalAlignment="Right" Width="335" Height="30" Visibility="{Binding UpdateLauncherCommand.IsRunning, Converter={StaticResource booleanToVisibilityConverter}}">
                        <ProgressBar Name="PbStatus" Width="250" Height="30" Value="{Binding UpdateDownloadProgress, Mode=OneWay}" />
                        <TextBlock Text="{Binding ElementName=PbStatus, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <Grid Grid.Column="3" Width="Auto" HorizontalAlignment="Right" Height="30" Visibility="{Binding UpdateFinished, Converter={StaticResource booleanToVisibilityConverter}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="165" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="165" />
                        </Grid.ColumnDefinitions>
                        <Button Grid.Column="0" Content="Open release notes" Command="{Binding OpenReleaseNotesCommand}" />
                        <Button Grid.Column="2" Content="Restart" Command="{Binding RestartCommand}" />
                    </Grid>

                    <!-- Window buttons -->
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Right" 
                                Grid.Column="4" Margin="1,0,0,0">
                        <Button Style="{StaticResource WindowButtonStyle}" Margin="0,0,2,0" 
                                FontSize="18" Height="27" Width="26" Click="MinimizeButton_Click"
                                Opacity="0.85" Padding="0,0,0,4" TextBlock.TextAlignment="Center" >
                            <Button.Content>
                                <TextBlock Text="&#128469;&#xFE0E;" Margin="0,-1,0,0" Width="20" TextWrapping="Wrap" />
                            </Button.Content>
                        </Button>
                        <Button Style="{StaticResource WindowButtonStyle}" Margin="0,0,2,0" 
                                FontSize="18" Height="27" Width="26" Click="MaximizeButton_Click"
                                Opacity="0.85" Padding="0,0,0,4" >
                            <Button.Content>
                                <TextBlock Text="&#128470;&#xFE0E;" Margin="0,0,0,0" x:Name="MaximizeButtonText" Width="20" TextAlignment="Center" TextWrapping="Wrap"/>
                            </Button.Content>
                        </Button>
                        <Button Style="{StaticResource WindowButtonStyle}" Margin="0,0,0,0" 
                                FontSize="18" Height="27" Width="26" Click="CloseButton_Click"
                                Opacity="0.85" Padding="0,0,0,4">
                            <Button.Content>
                                <TextBlock Text="&#128473;&#xFE0E;" Margin="0,0,0,0" TextAlignment="Center" Width="20" TextWrapping="Wrap"/>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </Grid>

                <!-- Info Row -->
                <Grid Grid.Row="1" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!-- Player / Server count -->
                    <StackPanel Orientation="Horizontal" Grid.Column="0">
                        <Label Content="Total Players:" HorizontalAlignment="Left" Margin="-5,0,0,0" Style="{DynamicResource SubTitleStyle}"/>
                        <Label Content="{Binding SelectedTab.TotalPlayers}" Style="{DynamicResource CountNumberStyle}"/>
                        <Label Content="Total Servers:" Style="{DynamicResource SubTitleStyle}"/>
                        <Label Content="{Binding SelectedTab.TotalServers}" Style="{DynamicResource CountNumberStyle}"/>
                    </StackPanel>

                    <!-- Text Filter -->
                    <Grid Grid.Column="1" VerticalAlignment="Center">
                        <TextBox TabIndex="1" Text="{Binding AdvancedServerFilter.FilterText, UpdateSourceTrigger=PropertyChanged}" FontSize="16" 
                                 TextChanged="TextBox_TextChanged" HorizontalAlignment="Stretch" Margin="10,0,10,0" 
                                 VerticalAlignment="Center" x:Name="FilterTextBox"/>

                        <!-- Hint -->
                        <TextBlock IsHitTestVisible="False" Text="Enter keywords to filter servers"
                                   VerticalAlignment="Center" HorizontalAlignment="Stretch" 
                                   Padding="3,0,0,0" Margin="10,0,10,0" Foreground="{DynamicResource TextHint}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Text, ElementName=FilterTextBox}" Value=""/>
                                                <Condition Binding="{Binding IsFocused, ElementName=FilterTextBox}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.Setters>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger.Setters>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>

                    <!-- Main Buttons -->
                    <StackPanel Orientation="Horizontal" Grid.Column="2">
                        <Button TabIndex="3" Content="Filter" Width="80" Command="{Binding ShowServerFilterCommand}" />
                        <Separator Opacity="0" Width="5" />
                        <Button TabIndex="3" Content="Matchmaking" Width="115" Command="{Binding EnterMatchmakingCommand}" />
                        <Separator Opacity="0" Width="5" />
                        <Button TabIndex="5" Content="Launch Game 🚀" Width="120" Command="{Binding LaunchH2MCommand}"/>
                    </StackPanel>
                </Grid>

                <Grid Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="3.5*"/>
                        <ColumnDefinition x:Name="partyColumn" Width="300"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Server tabs -->
                    <TabControl ItemsSource="{Binding ServerTabs}" SelectedItem="{Binding SelectedTab}" 
                                Grid.RowSpan="2" Margin="0,10,0,5" Style="{DynamicResource ServerTabControlStyle}" >
                        <TabControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type vm:IServerTabViewModel}">
                                <TextBlock Text="{Binding TabName}"/>
                            </DataTemplate>
                        </TabControl.ItemTemplate>
                        <TabControl.ContentTemplate>
                            <DataTemplate DataType="{x:Type vm:IServerTabViewModel}">
                                <Grid>
                                    <!-- Opaque background for the header row -->
                                    <Rectangle Fill="{DynamicResource ServerDataGridHeaderBackground}" VerticalAlignment="Top" Height="23" Margin="-2, -2, -2, 5"></Rectangle>
                                    <controls:CustomDataGrid
                                        x:Name="serverDataGrid" 
                                        Style="{DynamicResource ServerDataGridStyle}" 
                                        CellStyle="{DynamicResource ServerDataGridCellStyle}"
                                        ItemsSource="{Binding ServerCollectionView}" 
                                        FontFamily="Consolas"
                                        Margin="-2,-2,-2,-2" 
                                        Height="Auto" 
                                        KeyboardNavigation.TabNavigation="Once"
                                        TabIndex="2"
                                        CanUserReorderColumns="False" 
                                        CanUserAddRows="False" 
                                        CanUserDeleteRows="False" 
                                        CanUserSortColumns="True" 
                                        IsReadOnly="True"
                                        AutoGenerateColumns="False"
                                        GridLinesVisibility="None"
                                        SelectionUnit="FullRow"
                                        HorizontalScrollBarVisibility="Hidden"
                                        SelectionMode="Single"
                                        CanUserResizeColumns="true"
                                        HeadersVisibility="Column"
                                        VerticalScrollBarVisibility="Hidden"
                                        SelectedItem="{Binding SelectedServer, UpdateSourceTrigger=PropertyChanged}">
                                        <i:Interaction.Behaviors>
                                            <local:ScrollIntoViewBehavior />
                                        </i:Interaction.Behaviors>
                                        <DataGrid.Resources>
                                            <DataGridTextColumn 
                                                x:Key="ThatPeskyColumn"
                                                Header="Last played" 
                                                Visibility="{Binding Path=DataContext.IsRecentsSelected, Source={x:Reference mainWindow}, Converter={StaticResource booleanToVisibilityConverter}}" 
                                                SortMemberPath="SortPath"
                                                SortDirection="Descending"
                                                Binding="{Binding LastPlayed}"/>
                                        </DataGrid.Resources>
                                        <DataGrid.InputBindings>
                                            <!-- Key shortcut commands for row -->
                                            <KeyBinding Key="Return" Command="{Binding JoinServerCommand}" />
                                        </DataGrid.InputBindings>
                                        <DataGrid.ItemContainerStyle>
                                            <Style TargetType="DataGridRow" BasedOn="{StaticResource ServerDataGridRowStyle}">
                                                <!-- Enable focus and tab navigation for row -->
                                                <Setter Property="IsTabStop" Value="True"/>
                                                <Setter Property="Focusable" Value="True"/>

                                                <!-- Click handlers -->
                                                <EventSetter Event="MouseDoubleClick" Handler="DataGridRow_MouseDoubleClick"/>
                                                <EventSetter Event="MouseRightButtonDown" Handler="DataGridRow_MouseRightButtonDown"/>
                                                <EventSetter Event="GotFocus" Handler="DataGridRow_GotFocus"/>
                                            </Style>
                                        </DataGrid.ItemContainerStyle>

                                        <DataGrid.Columns>
                                            <!-- Private -->
                                            <DataGridTemplateColumn Header="🔒" CanUserResize="False" SortMemberPath="IsPrivate">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <TextBlock Text="{Binding IsPrivate, Converter={StaticResource BooleanToPrivateStatusConverter}}" 
                                                           HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>

                                            <!-- Hostname -->
                                            <DataGridTemplateColumn Header="Hostname" Width="5*" SortMemberPath="HostName">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate DataType="vm:ServerViewModel">
                                                        <StackPanel Orientation="Horizontal">
                                                            <Image Source="{Binding Protocol, Converter={StaticResource ProtocolToIconConverter}}" MaxWidth="16">
                                                                <Image.Style>
                                                                    <Style TargetType="Image">
                                                                        <Setter Property="Margin" Value="0,0,6,0"/>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="Source" Value="{x:Null}">
                                                                                <Setter Property="Margin" Value="0"/>
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </Image.Style>
                                                            </Image>
                                                            <TextBlock local:TextBlockExtensions.BindableInlines="{
                                                                            Binding HostName, 
                                                                            Converter={StaticResource HostNameColorConverter}
                                                                       }"
                                                                       IsHitTestVisible="False"
                                                                       Focusable="False"/>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>

                                            <!-- Last played -->
                                            <StaticResource ResourceKey="ThatPeskyColumn"/>

                                            <!-- Map -->
                                            <DataGridTextColumn Header="Map" 
                                                        Binding="{Binding MapDisplayName}" 
                                                        MinWidth="100"
                                                        CanUserResize="False">
                                                <DataGridTextColumn.ElementStyle>
                                                    <Style TargetType="TextBlock">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding HasMap}" Value="False">
                                                                <Setter Property="Foreground" Value="{DynamicResource DangerColorBrush}" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </DataGridTextColumn.ElementStyle>
                                            </DataGridTextColumn>

                                            <!-- Game mode -->
                                            <DataGridTextColumn Header="Mode" 
                                                        Binding="{Binding GameTypeDisplayName}" 
                                                        MinWidth="110"
                                                        CanUserResize="False"/>

                                            <!-- Player count -->
                                            <DataGridTextColumn Header="Players" 
                                                        SortMemberPath="ClientNum"
                                                        MinWidth="65"
                                                        Binding="{Binding Occupation}"
                                                        CanUserResize="False"
                                                        Width="80">
                                                <DataGridTextColumn.ElementStyle>
                                                    <Style TargetType="TextBlock">
                                                        <Setter Property="HorizontalAlignment" Value="Right" />
                                                    </Style>
                                                </DataGridTextColumn.ElementStyle>
                                            </DataGridTextColumn>

                                            <!-- Updated Favorite Column with Clickable Feature -->
                                            <DataGridTemplateColumn Header="Favourite" MinWidth="69" SortMemberPath="IsFavorite" CanUserResize="False">
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <Button Style="{StaticResource LinkButtonStyle}"
                                                                Content="{Binding IsFavorite, Converter={StaticResource BooleanToStarConverter}}"
                                                                Command="{Binding DataContext.ToggleFavouriteCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                                                CommandParameter="{Binding}"
                                                                HorizontalAlignment="Center" 
                                                                VerticalAlignment="Center"
                                                                FontSize="16"
                                                                Background="Transparent"
                                                                BorderThickness="0"
                                                                Margin="5,0,0,0"
                                                                Focusable="False"
                                                                IsTabStop="False" 
                                                                Cursor="Hand"/>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>

                                            <!-- Ping -->
                                            <DataGridTextColumn Header="Ping" Binding="{Binding Ping}" CanUserResize="False" Width="40">
                                                <DataGridTextColumn.ElementStyle>
                                                    <Style TargetType="TextBlock">
                                                        <Setter Property="HorizontalAlignment" Value="Right" />
                                                        <Setter Property="FontFamily" Value="Consolas" />
                                                        <Setter Property="Margin" Value="0,0,4,0"/>
                                                        <Setter Property="Foreground" Value="{Binding Ping, Converter={StaticResource PingColorConverter}}" />
                                                    </Style>
                                                </DataGridTextColumn.ElementStyle>
                                            </DataGridTextColumn>
                                        </DataGrid.Columns>
                                    </controls:CustomDataGrid>
                                </Grid>
                            </DataTemplate>
                        </TabControl.ContentTemplate>
                    </TabControl>


                    <!-- Party Header -->
                    <Border Grid.Column="0" Height="35" Padding="2" HorizontalAlignment="Right" VerticalAlignment="Top" CornerRadius="4"
                            Margin="0,3,0,5" BorderThickness="0.5" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <StackPanel Height="Auto" HorizontalAlignment="Right" VerticalAlignment="Center"
                                        Margin="1,0,5,0" Orientation="Horizontal" >

                                <!-- Party Status -->
                                <TextBlock DataContext="{Binding SocialOverviewViewModel.Friends}" 
                                           Text="{Binding PartyStatus, StringFormat={}Party: {0}}" 
                                           Foreground="{DynamicResource TextLight}" VerticalAlignment="Center" Margin="5,0,0,0">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsPartyExpanded, ElementName=mainWindow}" Value="False">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsPartyGuest}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <Separator Opacity="0" Width="5" />
                                <Button TabIndex="3" Content="Join" Width="80" Height="23" Command="{Binding SelectedTab.JoinServerCommand}" />
                                <Separator Opacity="0" Width="5" />
                                <Button TabIndex="4" Content="Refresh" Width="80" Height="23" Command="{Binding RefreshServersCommand}"/>
                            </StackPanel>

                            <!-- Expand / collapse -->
                            <ToggleButton Height="23" Width="20" Margin="0,0,2,0" Grid.Column="1"
                                          HorizontalAlignment="Right" VerticalAlignment="Center" ToolTip="Show / hide party"
                                          Foreground="{DynamicResource TextLight}" IsChecked="{Binding IsPartyExpanded, ElementName=mainWindow, Mode=TwoWay}">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                        <Setter Property="Content" Value="&#10094;"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="Content" Value="&#10095;"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                        </Grid>
                    </Border>

                    <controls:SocialOverviewControl DataContext="{Binding SocialOverviewViewModel}" Grid.Column="1" Grid.RowSpan="2" Margin="10,9,0,5" Width="290"
                                                    view:SlidePanelBehavior.IsExpanded="{Binding IsPartyExpanded, ElementName=mainWindow}">

                        <view:SlidePanelBehavior.TargetColumnName>partyColumn</view:SlidePanelBehavior.TargetColumnName>
                        <!-- Add margin to width -->
                        <view:SlidePanelBehavior.ExpandedWidth>300</view:SlidePanelBehavior.ExpandedWidth>
                        <view:SlidePanelBehavior.CollapsedWidth>0</view:SlidePanelBehavior.CollapsedWidth>

                        <controls:SocialOverviewControl.RenderTransform>
                            <TranslateTransform X="0"/>
                        </controls:SocialOverviewControl.RenderTransform>
                    </controls:SocialOverviewControl>
                </Grid>

                <StatusBar Grid.Row="3" Style="{DynamicResource MainStatusBarStyle}">
                    <StatusBar.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                            </Grid>
                        </ItemsPanelTemplate>
                    </StatusBar.ItemsPanel>
                    <StatusBarItem Content="{Binding StatusText}" Grid.Column="0" VerticalContentAlignment="Center" />

                    <!-- In-game state -->
                    <StatusBarItem Content="{Binding GameState.ConnectionText}" Grid.Column="1" VerticalContentAlignment="Center"/>
                    <Separator Width="1" Height="16" Grid.Column="2">
                        <Separator.Style>
                            <Style TargetType="Separator">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding GameState.ConnectionText}" Value="">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Separator.Style>
                    </Separator>

                    <!-- Game Detection -->
                    <StatusBarItem Content="{Binding GameState}" HorizontalAlignment="Right" 
                                   Grid.Column="3" VerticalContentAlignment="Center"
                                   ToolTip="{Binding GameState.InfoText}">
                        <StatusBarItem.ContentTemplate>
                            <DataTemplate DataType="{x:Type vm:GameStateViewModel}">
                                <TextBlock x:Name="ConnectionString" Height="Auto" 
                                           Text="{Binding DisplayText}" VerticalAlignment="Center" />
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsGameRunning}" Value="true">
                                        <Setter TargetName="ConnectionString" Property="Foreground" Value="{DynamicResource SuccessColorBrush}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsGameRunning}" Value="false">
                                        <Setter TargetName="ConnectionString" Property="Foreground" Value="{DynamicResource DangerColorBrush}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </StatusBarItem.ContentTemplate>
                    </StatusBarItem>

                    <!-- Customize -->
                    <StatusBarItem HorizontalAlignment="Right" Grid.Column="4" VerticalContentAlignment="Center">
                        <Button Style="{StaticResource LinkButtonStyle}" ToolTip="Customize..." Click="CustomizeButton_Click">
                            <TextBlock Text="&#x1FA84;" FontFamily="Segoe UI Emoji" FontWeight="Bold" Padding="0,0,0,1.5" Margin="1" FontSize="14"/>
                        </Button>
                    </StatusBarItem>

                    <!-- Settings -->
                    <StatusBarItem HorizontalAlignment="Right" Grid.Column="5" VerticalContentAlignment="Center">
                        <Button Style="{StaticResource LinkButtonStyle}"  Command="{Binding ShowSettingsCommand}">
                            <TextBlock Text="⚙" Padding="0,0,0,1.5" Margin="1" FontSize="14"/>
                        </Button>
                    </StatusBarItem>
                </StatusBar>
            </Grid>
        </Border>
    </Grid>
</Window>
