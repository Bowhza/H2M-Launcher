services:
  # Init Container to generate self-signed certificates
  init-certs:
    image: frapsoft/openssl:latest # A small image with OpenSSL pre-installed
    user: ${UID:-1001}:${GID:-1001}
    volumes:
      - ./nginx/certs:/certs
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    working_dir: "/certs"
    entrypoint: ["/certs/generate-self-signed.sh"]

  nginx:
    build: nginx/
    ports:
      - "443:443"
      - "80:80"
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    volumes:
      - ${CERT_PATH:-./nginx/certs/selfsigned.crt}:/etc/nginx/certs/fullchain.pem:ro
      - ${CERT_KEY_PATH:-./nginx/certs/selfsigned.key}:/etc/nginx/certs/privkey.pem:ro
    restart: unless-stopped
    depends_on:
      matchmaking-server:
        condition: service_healthy
      init-certs:
        condition: service_completed_successfully

  matchmaking-server:
    build:
      context: .
      dockerfile: MatchmakingServer/Dockerfile
      args:
        UID: ${UID:-1001}
        GID: ${GID:-1001}
    environment:
      APIKEY: ${API_KEY}
      JWT__Issuer: ${JWT_ISSUER}
      JWT__Audience: ${JWT_ISSUER}
      JWT__Secret: ${JWT_SECRET}
      Serilog__WriteTo__1__Name: File
      Serilog__WriteTo__1__Args__path: /app/logs/log-.txt
      Serilog__WriteTo__1__Args__rollingInterval: Day
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=database;Username=${DB_USER:-username};Password=${DB_PASSWORD:-password}
    ports:
      - 9100:9000
    volumes:
      - ./MatchmakingServer/appsettings.json:/app/appsettings.json
      - ${LOG_DIR:-./logs}:/app/logs
      - ./MatchmakingServer/Data/:/app/Data/
    healthcheck:
      test: curl --silent --fail http://localhost:9000/health || exit 1
      interval: 15s
      timeout: 20s
      retries: 5
      start_period: 8s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  dashboard-server:
    build:
      context: .
      dockerfile: Dashboard/Dockerfile
      args:
        UID: ${UID:-1001}
        GID: ${GID:-1001}
    environment:
      BackendApi__BaseAddress: http://matchmaking-server:9000
      BackendApi__DashboardApiKey: ${API_KEY}
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=dashboard-service;Username=${DB_USER:-username};Password=${DB_PASSWORD:-password}
    ports:
      - 7100:7000
    healthcheck:
      test: curl --silent --fail http://localhost:7000/health || exit 1
      interval: 15s
      timeout: 20s
      retries: 5
      start_period: 8s
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15.4-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-username}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: database
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d database -U $${DB_USER:-username}"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_DB_NAME: database
      ADMINER_DEFAULT_DB_DRIVER: pgsql
    ports:
      - "127.0.0.1:8080:8080"

  pgbackups:
    image: prodrigestivill/postgres-backup-local
    restart: always
    user: postgres:postgres
    volumes:
        - ${DB_BACKUP_DIR:-./pgbackup}:/backups
    links:
        - postgres
    depends_on:
        - postgres
    environment:
        POSTGRES_HOST: postgres
        POSTGRES_DB: database
        POSTGRES_USER: ${DB_USER:-username}
        POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
        POSTGRES_EXTRA_OPTS: -Z1 --schema=public --blobs
        SCHEDULE: '@daily'
        BACKUP_ON_START: 'TRUE'
        BACKUP_KEEP_DAYS: 7
        BACKUP_KEEP_WEEKS: 4
        BACKUP_KEEP_MONTHS: 6
        HEALTHCHECK_PORT: 8880

volumes:
  postgres_data:
